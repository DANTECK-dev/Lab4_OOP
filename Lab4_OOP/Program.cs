using System;
using MyLib_Lab4;

namespace Lab4_OOP
{
    class Programm
    {
        static void Main(string[] _)
        {
            Task1();
            Task2();
            Task3();
        }
        static private void Task1(){
            /* Создайте класс, описывающий данные человека (Person). 
             * Поля – ФИО, возраст и пол. Также должен быть метод для вывода данных в командную строку. 
             * Это будет класс с данных. Создайте класс (ListQueue),
             * имитирующий работу очереди (принцип FIFO) на основе односвязного списка.
             * Объект этого класса должен представлять собой объект очереди,
             * в который можно добавлять данные (объект Person) и получать по очереди (с «удалением» из очереди). 
             * Внутри класса-очереди создайте класс элемента очереди (Element), в котором будут поля: 
             *  объект данных (Person data);  следующий элемент списка (Element next). 
             * А сам класс очереди (ListQueue) будет содержать: приватное поле начала очереди (Element head) 
             *  метод для добавления данных в список;  метод для получения данных из списка (с удалением выданного элемента).
             * Если список пустой, то он должен адекватно реагировать на попутку получить из него элемент. 
             * Реализуйте интерфейс работы со списком. Пользователь должен иметь возможность: 
             *  Добавлять элемент в список  Получить элемент из списка */
            ListQueue listQueue = new();
            listQueue.Add(new Person("Андреев", "Алексей", "Даниилович"));
            listQueue.Add(new Person("Степанов", "Иван", "Павлович"));
            listQueue.Remove();
            listQueue.Add(new Person("Федоров", "Всеволод", "Кириллович"));
            listQueue.Remove();
            listQueue.Remove();
            listQueue.Remove();
            Console.ReadKey();
            Console.WriteLine();
            Console.Clear();
        }

        static private void Task2(){
            /* Добавьте метод, позволяющий из списка получить все элементы в виде массива.
             * Перед выдачей массива, он должен быть отсортирован (сами выберете поле, на основе которого будет производиться сортировка).
             * Сортировка должна производится с помощью метода шейкер-сортировки (модификация метода пузырьковой сортировки).
             * В отличие от пузырьковой сортировки в данном методе сортировка происходит в двух направлениях: с начала и с конца.
             * Алгоритм сортировки: Для начала необходимо определить три индекса:  max – номер элемента, до которого идет сортировка с начала.
             * Изначально равен номеру последнего элемента в массиве (Length - 1). 7  min – номер элемента, до которого идет сортировка с конца.
             * Изначально равен номеру первого элемента в массиве (0).  Также вводится промежуточный индекс – dir. 
             * Изначально равен min. Основные шаги сортировки: 1) Как и в пузырьковой сортировке, начиная с элемента под номером min,
             * сравниваем последовательно два соседних элемента. Если они в неправильном порядке относительно друг друга, то меняем их местами. 
             * При этом, если произошел обмен элементами, то dir становится равен номеру элемента, с которым произошел обмен. 
             * Таким образом, мы запомним последний элемент, после которого обменов не было, а значит, элементы после него уже упорядочены. 
             * Продолжаем до элемента с номером max. 2) Определяем новое значение max = dir. 3) Теперь выполняем сортировку с конца,
             * начиная с элемента под номером max, сравниваем последовательно два соседних элемента. Если они в неправильном порядке относительно друг друга,
             * то меняем их местами. Как и до этого, если произошел обмен элементами, то dir становится равен номеру элемента, с которым произошел обмен.
             * Продолжаем до элемента с номером min. 4) Определяем новое значение min = dir. 5) Если min и max пересеклись, то сортировка закончена. Если нет, то возвращаемся к шагу 1. */
            ListQueue listQueue =new();
            listQueue.Add(new Person("Андреев", "Алексей", "Даниилович"));
            listQueue.Add(new Person("Степанов", "Иван", "Павлович"));
            listQueue.Add(new Person("Платонова", "Марьям", "Максимовна"));
            listQueue.Add(new Person("Федоров", "Всеволод", "Кириллович"));
            listQueue.Add(new Person("Муравьев", "Роман", "Сергеевич"));
            listQueue.Add(new Person("Макаров", "Мирослав", "Артемьевич"));
            listQueue.Add(new Person("Фомина", "Серафима", "Германовна"));
            listQueue.Add(new Person("Казаков", "Иван", "Кириллович"));
            listQueue.Add(new Person("Цветков", "Билал", "Михайлович"));
            listQueue.Add(new Person("Попова", "Александра", "Фёдоровна"));
            listQueue.Add(new Person("Вдовина", "Екатерина", "Семёновна"));
            listQueue.Add(new Person("Петрова", "Диана", "Ивановна"));
            listQueue.Add(new Person("Федоров", "Всеволод", "Кириллович"));
            listQueue.Add(new Person("Копылова", "Ева", "Юрьевна"));
            listQueue.GetMassive();
            Console.ReadKey();
            Console.Clear();
        }

        static private void Task3(){
            /* Создайте на основе классов списка из первого задания отдельную библиотеку.
             * В итоге все классы, касающиеся списка, будут находиться в библиотеке, 
             * которая подключается к основному проекту, а вся работа пользователя со списком – в основном проекте. */
        }

    }

}